
tMeter2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000038a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000003fe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800060  00800060  000003fe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000430  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009e2  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000006e8  00000000  00000000  00000eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000437  00000000  00000000  0000159e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b8  00000000  00000000  000019d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003ad  00000000  00000000  00001a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022b  00000000  00000000  00001e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 36       	cpi	r26, 0x64	; 100
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
  74:	0c 94 c3 01 	jmp	0x386	; 0x386 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <ds18b20_reset>:
 */
uint8_t ds18b20_reset() {
	uint8_t i;

	//low for 480us
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
  7c:	a8 98       	cbi	0x15, 0	; 21
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
  7e:	a0 9a       	sbi	0x14, 0	; 20
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  80:	80 ea       	ldi	r24, 0xA0	; 160
  82:	8a 95       	dec	r24
  84:	f1 f7       	brne	.-4      	; 0x82 <ds18b20_reset+0x6>
	_delay_us(480);

	//release line and wait for 60uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
  86:	a0 98       	cbi	0x14, 0	; 20
  88:	94 e1       	ldi	r25, 0x14	; 20
  8a:	9a 95       	dec	r25
  8c:	f1 f7       	brne	.-4      	; 0x8a <ds18b20_reset+0xe>
	_delay_us(60);

	//get value and wait 420us
	i = (DS18B20_PIN & (1<<DS18B20_DQ));
  8e:	83 b3       	in	r24, 0x13	; 19
  90:	9c e8       	ldi	r25, 0x8C	; 140
  92:	9a 95       	dec	r25
  94:	f1 f7       	brne	.-4      	; 0x92 <ds18b20_reset+0x16>
	_delay_us(420);

	//return the read value, 0=ok, 1=error
	return i;
}
  96:	81 70       	andi	r24, 0x01	; 1
  98:	08 95       	ret

0000009a <ds18b20_writebit>:
/*
 * write one bit
 */
void ds18b20_writebit(uint8_t bit){
	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
  9a:	a8 98       	cbi	0x15, 0	; 21
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
  9c:	a0 9a       	sbi	0x14, 0	; 20
  9e:	00 00       	nop
	_delay_us(1);

	//if we want to write 1, release the line (if not will keep low)
	if(bit)
  a0:	81 11       	cpse	r24, r1
		DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
  a2:	a0 98       	cbi	0x14, 0	; 20
  a4:	84 e1       	ldi	r24, 0x14	; 20
  a6:	8a 95       	dec	r24
  a8:	f1 f7       	brne	.-4      	; 0xa6 <ds18b20_writebit+0xc>

	//wait 60uS and release the line
	_delay_us(60);
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
  aa:	a0 98       	cbi	0x14, 0	; 20
  ac:	08 95       	ret

000000ae <ds18b20_readbit>:
 */
uint8_t ds18b20_readbit(void){
	uint8_t bit=0;

	//low for 1uS
	DS18B20_PORT &= ~ (1<<DS18B20_DQ); //low
  ae:	a8 98       	cbi	0x15, 0	; 21
	DS18B20_DDR |= (1<<DS18B20_DQ); //output
  b0:	a0 9a       	sbi	0x14, 0	; 20
  b2:	00 00       	nop
	_delay_us(1);

	//release line and wait for 14uS
	DS18B20_DDR &= ~(1<<DS18B20_DQ); //input
  b4:	a0 98       	cbi	0x14, 0	; 20
  b6:	84 e0       	ldi	r24, 0x04	; 4
  b8:	8a 95       	dec	r24
  ba:	f1 f7       	brne	.-4      	; 0xb8 <ds18b20_readbit+0xa>
  bc:	00 c0       	rjmp	.+0      	; 0xbe <ds18b20_readbit+0x10>
	_delay_us(14);

	//read the value
	if(DS18B20_PIN & (1<<DS18B20_DQ))
  be:	83 b3       	in	r24, 0x13	; 19
  c0:	9f e0       	ldi	r25, 0x0F	; 15
  c2:	9a 95       	dec	r25
  c4:	f1 f7       	brne	.-4      	; 0xc2 <ds18b20_readbit+0x14>
		bit=1;

	//wait 45uS and return read value
	_delay_us(45);
	return bit;
}
  c6:	81 70       	andi	r24, 0x01	; 1
  c8:	08 95       	ret

000000ca <ds18b20_writebyte>:

/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
  ca:	cf 93       	push	r28
  cc:	df 93       	push	r29
  ce:	d8 2f       	mov	r29, r24
  d0:	c8 e0       	ldi	r28, 0x08	; 8
	uint8_t i=8;
	while(i--){
		ds18b20_writebit(byte&1);
  d2:	8d 2f       	mov	r24, r29
  d4:	81 70       	andi	r24, 0x01	; 1
  d6:	0e 94 4d 00 	call	0x9a	; 0x9a <ds18b20_writebit>
		byte >>= 1;
  da:	d6 95       	lsr	r29
  dc:	c1 50       	subi	r28, 0x01	; 1
/*
 * write one byte
 */
void ds18b20_writebyte(uint8_t byte){
	uint8_t i=8;
	while(i--){
  de:	c9 f7       	brne	.-14     	; 0xd2 <ds18b20_writebyte+0x8>
		ds18b20_writebit(byte&1);
		byte >>= 1;
	}
}
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <ds18b20_readbyte>:

/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
  ea:	d8 e0       	ldi	r29, 0x08	; 8
	uint8_t i=8, n=0;
  ec:	c0 e0       	ldi	r28, 0x00	; 0
	while(i--){
		n >>= 1;
		n |= (ds18b20_readbit()<<7);
  ee:	0e 94 57 00 	call	0xae	; 0xae <ds18b20_readbit>
  f2:	20 e8       	ldi	r18, 0x80	; 128
  f4:	82 9f       	mul	r24, r18
  f6:	c0 01       	movw	r24, r0
  f8:	11 24       	eor	r1, r1
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
	while(i--){
		n >>= 1;
  fa:	c6 95       	lsr	r28
		n |= (ds18b20_readbit()<<7);
  fc:	c8 2b       	or	r28, r24
  fe:	d1 50       	subi	r29, 0x01	; 1
/*
 * read one byte
 */
uint8_t ds18b20_readbyte(void){
	uint8_t i=8, n=0;
	while(i--){
 100:	b1 f7       	brne	.-20     	; 0xee <ds18b20_readbyte+0x8>
		n >>= 1;
		n |= (ds18b20_readbit()<<7);
	}
	return n;
}
 102:	8c 2f       	mov	r24, r28
 104:	df 91       	pop	r29
 106:	cf 91       	pop	r28
 108:	08 95       	ret

0000010a <ds18b20_gettemp>:

/*
 * get temperature
 */
double ds18b20_gettemp() {
 10a:	cf 93       	push	r28
	uint8_t temperature_l;
	uint8_t temperature_h;
	double retd = 0;

	#if DS18B20_STOPINTERRUPTONREAD == 1
	cli();
 10c:	f8 94       	cli
	#endif

	ds18b20_reset(); //reset
 10e:	0e 94 3e 00 	call	0x7c	; 0x7c <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
 112:	8c ec       	ldi	r24, 0xCC	; 204
 114:	0e 94 65 00 	call	0xca	; 0xca <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_CONVERTTEMP); //start temperature conversion
 118:	84 e4       	ldi	r24, 0x44	; 68
 11a:	0e 94 65 00 	call	0xca	; 0xca <ds18b20_writebyte>

	while(!ds18b20_readbit()); //wait until conversion is complete
 11e:	0e 94 57 00 	call	0xae	; 0xae <ds18b20_readbit>
 122:	88 23       	and	r24, r24
 124:	e1 f3       	breq	.-8      	; 0x11e <ds18b20_gettemp+0x14>

	ds18b20_reset(); //reset
 126:	0e 94 3e 00 	call	0x7c	; 0x7c <ds18b20_reset>
	ds18b20_writebyte(DS18B20_CMD_SKIPROM); //skip ROM
 12a:	8c ec       	ldi	r24, 0xCC	; 204
 12c:	0e 94 65 00 	call	0xca	; 0xca <ds18b20_writebyte>
	ds18b20_writebyte(DS18B20_CMD_RSCRATCHPAD); //read scratchpad
 130:	8e eb       	ldi	r24, 0xBE	; 190
 132:	0e 94 65 00 	call	0xca	; 0xca <ds18b20_writebyte>

	//read 2 byte from scratchpad
	temperature_l = ds18b20_readbyte();
 136:	0e 94 73 00 	call	0xe6	; 0xe6 <ds18b20_readbyte>
 13a:	c8 2f       	mov	r28, r24
	temperature_h = ds18b20_readbyte();
 13c:	0e 94 73 00 	call	0xe6	; 0xe6 <ds18b20_readbyte>

	#if DS18B20_STOPINTERRUPTONREAD == 1
	sei();
 140:	78 94       	sei
	#endif

	//convert the 12 bit value obtained
	retd = ( ( temperature_h << 8 ) + temperature_l ) * 0.0625;
 142:	68 2f       	mov	r22, r24
 144:	70 e0       	ldi	r23, 0x00	; 0
 146:	76 2f       	mov	r23, r22
 148:	66 27       	eor	r22, r22
 14a:	6c 0f       	add	r22, r28
 14c:	71 1d       	adc	r23, r1
 14e:	07 2e       	mov	r0, r23
 150:	00 0c       	add	r0, r0
 152:	88 0b       	sbc	r24, r24
 154:	99 0b       	sbc	r25, r25
 156:	0e 94 ca 00 	call	0x194	; 0x194 <__floatsisf>
 15a:	20 e0       	ldi	r18, 0x00	; 0
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	40 e8       	ldi	r20, 0x80	; 128
 160:	5d e3       	ldi	r21, 0x3D	; 61
 162:	0e 94 05 01 	call	0x20a	; 0x20a <__mulsf3>

	return retd;
}
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <main>:

    while (1) 
    {
		temp  = ds18b20_gettemp();
		//_delay_ms(500);
		temp = 7;
 16a:	0f 2e       	mov	r0, r31
 16c:	c1 2c       	mov	r12, r1
 16e:	d1 2c       	mov	r13, r1
 170:	f0 ee       	ldi	r31, 0xE0	; 224
 172:	ef 2e       	mov	r14, r31
 174:	f0 e4       	ldi	r31, 0x40	; 64
 176:	ff 2e       	mov	r15, r31
 178:	f0 2d       	mov	r31, r0
{
	

    while (1) 
    {
		temp  = ds18b20_gettemp();
 17a:	0e 94 85 00 	call	0x10a	; 0x10a <ds18b20_gettemp>
		//_delay_ms(500);
		temp = 7;
 17e:	c0 92 60 00 	sts	0x0060, r12	; 0x800060 <_edata>
 182:	d0 92 61 00 	sts	0x0061, r13	; 0x800061 <_edata+0x1>
 186:	e0 92 62 00 	sts	0x0062, r14	; 0x800062 <_edata+0x2>
 18a:	f0 92 63 00 	sts	0x0063, r15	; 0x800063 <_edata+0x3>
    }
 18e:	f5 cf       	rjmp	.-22     	; 0x17a <main+0x10>

00000190 <__floatunsisf>:
 190:	e8 94       	clt
 192:	09 c0       	rjmp	.+18     	; 0x1a6 <__floatsisf+0x12>

00000194 <__floatsisf>:
 194:	97 fb       	bst	r25, 7
 196:	3e f4       	brtc	.+14     	; 0x1a6 <__floatsisf+0x12>
 198:	90 95       	com	r25
 19a:	80 95       	com	r24
 19c:	70 95       	com	r23
 19e:	61 95       	neg	r22
 1a0:	7f 4f       	sbci	r23, 0xFF	; 255
 1a2:	8f 4f       	sbci	r24, 0xFF	; 255
 1a4:	9f 4f       	sbci	r25, 0xFF	; 255
 1a6:	99 23       	and	r25, r25
 1a8:	a9 f0       	breq	.+42     	; 0x1d4 <__floatsisf+0x40>
 1aa:	f9 2f       	mov	r31, r25
 1ac:	96 e9       	ldi	r25, 0x96	; 150
 1ae:	bb 27       	eor	r27, r27
 1b0:	93 95       	inc	r25
 1b2:	f6 95       	lsr	r31
 1b4:	87 95       	ror	r24
 1b6:	77 95       	ror	r23
 1b8:	67 95       	ror	r22
 1ba:	b7 95       	ror	r27
 1bc:	f1 11       	cpse	r31, r1
 1be:	f8 cf       	rjmp	.-16     	; 0x1b0 <__floatsisf+0x1c>
 1c0:	fa f4       	brpl	.+62     	; 0x200 <__floatsisf+0x6c>
 1c2:	bb 0f       	add	r27, r27
 1c4:	11 f4       	brne	.+4      	; 0x1ca <__floatsisf+0x36>
 1c6:	60 ff       	sbrs	r22, 0
 1c8:	1b c0       	rjmp	.+54     	; 0x200 <__floatsisf+0x6c>
 1ca:	6f 5f       	subi	r22, 0xFF	; 255
 1cc:	7f 4f       	sbci	r23, 0xFF	; 255
 1ce:	8f 4f       	sbci	r24, 0xFF	; 255
 1d0:	9f 4f       	sbci	r25, 0xFF	; 255
 1d2:	16 c0       	rjmp	.+44     	; 0x200 <__floatsisf+0x6c>
 1d4:	88 23       	and	r24, r24
 1d6:	11 f0       	breq	.+4      	; 0x1dc <__floatsisf+0x48>
 1d8:	96 e9       	ldi	r25, 0x96	; 150
 1da:	11 c0       	rjmp	.+34     	; 0x1fe <__floatsisf+0x6a>
 1dc:	77 23       	and	r23, r23
 1de:	21 f0       	breq	.+8      	; 0x1e8 <__floatsisf+0x54>
 1e0:	9e e8       	ldi	r25, 0x8E	; 142
 1e2:	87 2f       	mov	r24, r23
 1e4:	76 2f       	mov	r23, r22
 1e6:	05 c0       	rjmp	.+10     	; 0x1f2 <__floatsisf+0x5e>
 1e8:	66 23       	and	r22, r22
 1ea:	71 f0       	breq	.+28     	; 0x208 <__floatsisf+0x74>
 1ec:	96 e8       	ldi	r25, 0x86	; 134
 1ee:	86 2f       	mov	r24, r22
 1f0:	70 e0       	ldi	r23, 0x00	; 0
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	2a f0       	brmi	.+10     	; 0x200 <__floatsisf+0x6c>
 1f6:	9a 95       	dec	r25
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	88 1f       	adc	r24, r24
 1fe:	da f7       	brpl	.-10     	; 0x1f6 <__floatsisf+0x62>
 200:	88 0f       	add	r24, r24
 202:	96 95       	lsr	r25
 204:	87 95       	ror	r24
 206:	97 f9       	bld	r25, 7
 208:	08 95       	ret

0000020a <__mulsf3>:
 20a:	0e 94 18 01 	call	0x230	; 0x230 <__mulsf3x>
 20e:	0c 94 89 01 	jmp	0x312	; 0x312 <__fp_round>
 212:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <__fp_pscA>
 216:	38 f0       	brcs	.+14     	; 0x226 <__mulsf3+0x1c>
 218:	0e 94 82 01 	call	0x304	; 0x304 <__fp_pscB>
 21c:	20 f0       	brcs	.+8      	; 0x226 <__mulsf3+0x1c>
 21e:	95 23       	and	r25, r21
 220:	11 f0       	breq	.+4      	; 0x226 <__mulsf3+0x1c>
 222:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__fp_inf>
 226:	0c 94 78 01 	jmp	0x2f0	; 0x2f0 <__fp_nan>
 22a:	11 24       	eor	r1, r1
 22c:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__fp_szero>

00000230 <__mulsf3x>:
 230:	0e 94 9a 01 	call	0x334	; 0x334 <__fp_split3>
 234:	70 f3       	brcs	.-36     	; 0x212 <__mulsf3+0x8>

00000236 <__mulsf3_pse>:
 236:	95 9f       	mul	r25, r21
 238:	c1 f3       	breq	.-16     	; 0x22a <__mulsf3+0x20>
 23a:	95 0f       	add	r25, r21
 23c:	50 e0       	ldi	r21, 0x00	; 0
 23e:	55 1f       	adc	r21, r21
 240:	62 9f       	mul	r22, r18
 242:	f0 01       	movw	r30, r0
 244:	72 9f       	mul	r23, r18
 246:	bb 27       	eor	r27, r27
 248:	f0 0d       	add	r31, r0
 24a:	b1 1d       	adc	r27, r1
 24c:	63 9f       	mul	r22, r19
 24e:	aa 27       	eor	r26, r26
 250:	f0 0d       	add	r31, r0
 252:	b1 1d       	adc	r27, r1
 254:	aa 1f       	adc	r26, r26
 256:	64 9f       	mul	r22, r20
 258:	66 27       	eor	r22, r22
 25a:	b0 0d       	add	r27, r0
 25c:	a1 1d       	adc	r26, r1
 25e:	66 1f       	adc	r22, r22
 260:	82 9f       	mul	r24, r18
 262:	22 27       	eor	r18, r18
 264:	b0 0d       	add	r27, r0
 266:	a1 1d       	adc	r26, r1
 268:	62 1f       	adc	r22, r18
 26a:	73 9f       	mul	r23, r19
 26c:	b0 0d       	add	r27, r0
 26e:	a1 1d       	adc	r26, r1
 270:	62 1f       	adc	r22, r18
 272:	83 9f       	mul	r24, r19
 274:	a0 0d       	add	r26, r0
 276:	61 1d       	adc	r22, r1
 278:	22 1f       	adc	r18, r18
 27a:	74 9f       	mul	r23, r20
 27c:	33 27       	eor	r19, r19
 27e:	a0 0d       	add	r26, r0
 280:	61 1d       	adc	r22, r1
 282:	23 1f       	adc	r18, r19
 284:	84 9f       	mul	r24, r20
 286:	60 0d       	add	r22, r0
 288:	21 1d       	adc	r18, r1
 28a:	82 2f       	mov	r24, r18
 28c:	76 2f       	mov	r23, r22
 28e:	6a 2f       	mov	r22, r26
 290:	11 24       	eor	r1, r1
 292:	9f 57       	subi	r25, 0x7F	; 127
 294:	50 40       	sbci	r21, 0x00	; 0
 296:	9a f0       	brmi	.+38     	; 0x2be <__mulsf3_pse+0x88>
 298:	f1 f0       	breq	.+60     	; 0x2d6 <__mulsf3_pse+0xa0>
 29a:	88 23       	and	r24, r24
 29c:	4a f0       	brmi	.+18     	; 0x2b0 <__mulsf3_pse+0x7a>
 29e:	ee 0f       	add	r30, r30
 2a0:	ff 1f       	adc	r31, r31
 2a2:	bb 1f       	adc	r27, r27
 2a4:	66 1f       	adc	r22, r22
 2a6:	77 1f       	adc	r23, r23
 2a8:	88 1f       	adc	r24, r24
 2aa:	91 50       	subi	r25, 0x01	; 1
 2ac:	50 40       	sbci	r21, 0x00	; 0
 2ae:	a9 f7       	brne	.-22     	; 0x29a <__mulsf3_pse+0x64>
 2b0:	9e 3f       	cpi	r25, 0xFE	; 254
 2b2:	51 05       	cpc	r21, r1
 2b4:	80 f0       	brcs	.+32     	; 0x2d6 <__mulsf3_pse+0xa0>
 2b6:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__fp_inf>
 2ba:	0c 94 bd 01 	jmp	0x37a	; 0x37a <__fp_szero>
 2be:	5f 3f       	cpi	r21, 0xFF	; 255
 2c0:	e4 f3       	brlt	.-8      	; 0x2ba <__mulsf3_pse+0x84>
 2c2:	98 3e       	cpi	r25, 0xE8	; 232
 2c4:	d4 f3       	brlt	.-12     	; 0x2ba <__mulsf3_pse+0x84>
 2c6:	86 95       	lsr	r24
 2c8:	77 95       	ror	r23
 2ca:	67 95       	ror	r22
 2cc:	b7 95       	ror	r27
 2ce:	f7 95       	ror	r31
 2d0:	e7 95       	ror	r30
 2d2:	9f 5f       	subi	r25, 0xFF	; 255
 2d4:	c1 f7       	brne	.-16     	; 0x2c6 <__mulsf3_pse+0x90>
 2d6:	fe 2b       	or	r31, r30
 2d8:	88 0f       	add	r24, r24
 2da:	91 1d       	adc	r25, r1
 2dc:	96 95       	lsr	r25
 2de:	87 95       	ror	r24
 2e0:	97 f9       	bld	r25, 7
 2e2:	08 95       	ret

000002e4 <__fp_inf>:
 2e4:	97 f9       	bld	r25, 7
 2e6:	9f 67       	ori	r25, 0x7F	; 127
 2e8:	80 e8       	ldi	r24, 0x80	; 128
 2ea:	70 e0       	ldi	r23, 0x00	; 0
 2ec:	60 e0       	ldi	r22, 0x00	; 0
 2ee:	08 95       	ret

000002f0 <__fp_nan>:
 2f0:	9f ef       	ldi	r25, 0xFF	; 255
 2f2:	80 ec       	ldi	r24, 0xC0	; 192
 2f4:	08 95       	ret

000002f6 <__fp_pscA>:
 2f6:	00 24       	eor	r0, r0
 2f8:	0a 94       	dec	r0
 2fa:	16 16       	cp	r1, r22
 2fc:	17 06       	cpc	r1, r23
 2fe:	18 06       	cpc	r1, r24
 300:	09 06       	cpc	r0, r25
 302:	08 95       	ret

00000304 <__fp_pscB>:
 304:	00 24       	eor	r0, r0
 306:	0a 94       	dec	r0
 308:	12 16       	cp	r1, r18
 30a:	13 06       	cpc	r1, r19
 30c:	14 06       	cpc	r1, r20
 30e:	05 06       	cpc	r0, r21
 310:	08 95       	ret

00000312 <__fp_round>:
 312:	09 2e       	mov	r0, r25
 314:	03 94       	inc	r0
 316:	00 0c       	add	r0, r0
 318:	11 f4       	brne	.+4      	; 0x31e <__fp_round+0xc>
 31a:	88 23       	and	r24, r24
 31c:	52 f0       	brmi	.+20     	; 0x332 <__fp_round+0x20>
 31e:	bb 0f       	add	r27, r27
 320:	40 f4       	brcc	.+16     	; 0x332 <__fp_round+0x20>
 322:	bf 2b       	or	r27, r31
 324:	11 f4       	brne	.+4      	; 0x32a <__fp_round+0x18>
 326:	60 ff       	sbrs	r22, 0
 328:	04 c0       	rjmp	.+8      	; 0x332 <__fp_round+0x20>
 32a:	6f 5f       	subi	r22, 0xFF	; 255
 32c:	7f 4f       	sbci	r23, 0xFF	; 255
 32e:	8f 4f       	sbci	r24, 0xFF	; 255
 330:	9f 4f       	sbci	r25, 0xFF	; 255
 332:	08 95       	ret

00000334 <__fp_split3>:
 334:	57 fd       	sbrc	r21, 7
 336:	90 58       	subi	r25, 0x80	; 128
 338:	44 0f       	add	r20, r20
 33a:	55 1f       	adc	r21, r21
 33c:	59 f0       	breq	.+22     	; 0x354 <__fp_splitA+0x10>
 33e:	5f 3f       	cpi	r21, 0xFF	; 255
 340:	71 f0       	breq	.+28     	; 0x35e <__fp_splitA+0x1a>
 342:	47 95       	ror	r20

00000344 <__fp_splitA>:
 344:	88 0f       	add	r24, r24
 346:	97 fb       	bst	r25, 7
 348:	99 1f       	adc	r25, r25
 34a:	61 f0       	breq	.+24     	; 0x364 <__fp_splitA+0x20>
 34c:	9f 3f       	cpi	r25, 0xFF	; 255
 34e:	79 f0       	breq	.+30     	; 0x36e <__fp_splitA+0x2a>
 350:	87 95       	ror	r24
 352:	08 95       	ret
 354:	12 16       	cp	r1, r18
 356:	13 06       	cpc	r1, r19
 358:	14 06       	cpc	r1, r20
 35a:	55 1f       	adc	r21, r21
 35c:	f2 cf       	rjmp	.-28     	; 0x342 <__fp_split3+0xe>
 35e:	46 95       	lsr	r20
 360:	f1 df       	rcall	.-30     	; 0x344 <__fp_splitA>
 362:	08 c0       	rjmp	.+16     	; 0x374 <__fp_splitA+0x30>
 364:	16 16       	cp	r1, r22
 366:	17 06       	cpc	r1, r23
 368:	18 06       	cpc	r1, r24
 36a:	99 1f       	adc	r25, r25
 36c:	f1 cf       	rjmp	.-30     	; 0x350 <__fp_splitA+0xc>
 36e:	86 95       	lsr	r24
 370:	71 05       	cpc	r23, r1
 372:	61 05       	cpc	r22, r1
 374:	08 94       	sec
 376:	08 95       	ret

00000378 <__fp_zero>:
 378:	e8 94       	clt

0000037a <__fp_szero>:
 37a:	bb 27       	eor	r27, r27
 37c:	66 27       	eor	r22, r22
 37e:	77 27       	eor	r23, r23
 380:	cb 01       	movw	r24, r22
 382:	97 f9       	bld	r25, 7
 384:	08 95       	ret

00000386 <_exit>:
 386:	f8 94       	cli

00000388 <__stop_program>:
 388:	ff cf       	rjmp	.-2      	; 0x388 <__stop_program>
